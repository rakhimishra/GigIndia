{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","handleChange","event","setState","SPREADSHEET_ID","target","value","console","log","state","validateField","field","length","className","handleBlur","error","name","handleChange1","API_KEY","handleSubmit","preventDefault","spreadsheetId","apiKey","Spreadsheet","axios","get","then","response","data","valueRanges","values","posts","catch","this","encType","autoComplete","type","placeholder","onChange","onBlur","required","onClick","map","numList","i","key","num","j","ref","contentEditable","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,0JCmH5BC,G,oEA3Gb,aAAc,IAAD,8BACX,gBAWFC,aAAa,SAACC,GACZ,EAAKC,SAAS,CACXC,eAAgBF,EAAMG,OAAOC,QAGhCC,QAAQC,IAAI,EAAKC,MAAML,iBAjBZ,EAsBbM,cAAgB,SAACC,EAAOL,GACtB,OAAGA,EAAMM,QAAQ,EACR,yBAAKC,UAAU,sBAAqB,0BAAMA,UAAU,mBAAmBF,GAAvE,uBAEE,IA1BA,EA8BbG,WAAY,SAACZ,GACX,EAAKC,SAAS,CAAEY,MAAO,EAAKL,cAAcR,EAAMG,OAAOW,KAAMd,EAAMG,OAAOC,UA/B/D,EAkCbW,cAAgB,SAACf,GACf,EAAKC,SAAS,CACZe,QAAQhB,EAAMG,OAAOC,SApCZ,EAwCba,aAAe,SAACjB,GACdA,EAAMkB,iBACN,IAAMC,EAAgB,EAAKZ,MAAML,eAC3BkB,EAAS,EAAKb,MAAMS,QAE1BX,QAAQC,IAAIa,GACZ,IAAME,EAAW,wDAAoDF,EAApD,kEAA2HC,GAC5IE,IACGC,IAAIF,GACJG,MAAK,SAACC,GACLpB,QAAQC,IAAImB,EAASC,KAAKC,YAAY,GAAGC,QACzC,EAAK3B,SAAS,CAAE4B,MAAOJ,EAASC,KAAKC,YAAY,GAAGC,YAErDE,OAAM,SAACjB,GACNR,QAAQC,IAAIO,GACZ,EAAKZ,SAAS,CAAEY,MAAO,wCApD3B,EAAKN,MAAQ,CACbS,QAAQ,GACRd,eAAe,GACfW,MAAO,GACPgB,MAAO,IAPI,E,qDA8DH,IAAD,SACkBE,KAAKxB,MAAtBsB,EADD,EACCA,MADD,EACQhB,MACf,OACE,oCAEE,yBAAKF,UAAU,sEACb,yBAAKA,UAAU,sDACb,yBAAKA,UAAU,aAEVoB,KAAKxB,MAAMM,MAAQ,yBAAKF,UAAU,sBAAqB,0BAAMA,UAAU,mBAAmBoB,KAAKxB,MAAMM,QAAqB,KAE7H,0BAAOmB,QAAQ,sBAAsBC,aAAa,OAC9C,yBAAKtB,UAAU,gCACb,2BAAOG,KAAK,MAAMoB,KAAK,OAAOvB,UAAU,qDAAqDwB,YAAY,4BAA4B/B,MAAO2B,KAAKxB,MAAMO,KAAMsB,SAAUL,KAAKhB,cAAesB,OAAQN,KAAKnB,WACxM0B,SAAS,cAEX,yBAAK3B,UAAU,gCACb,2BAAOG,KAAK,gBAAgBoB,KAAK,OAAOvB,UAAU,qDAAqDwB,YAAY,4BAA4BE,OAAQN,KAAKnB,WAAYwB,SAAUL,KAAKhC,gBAGzL,uBAAGY,UAAU,oBAAmB,4BAAQ4B,QAASR,KAAKd,aAAcN,UAAU,2EAA2EP,MAAM,cAA/H,cAK9C,+BACE,+BAEOyB,EAAMW,KAAI,SAACC,EAAQC,GAAT,OACP,wBAAIC,IAAKD,GAEND,EAAQD,KAAI,SAACI,EAAIC,GAAL,OACT,wBAAIF,IAAKE,GAAG,2BAAOX,KAAK,OAAO9B,MAAOwC,EAAKE,IAAK,EAAKC,iC,GAhGzDC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdjC,OAAM,SAAAjB,GACLR,QAAQQ,MAAMA,EAAMmD,c","file":"static/js/main.bb1447ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nimport React, { Component } from 'react';\nimport axios from \"axios\";\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nclass App extends Component {\n\n  constructor(){\n    super();\n    // this.contentEditable = React.createRef();\n    this.state = {\n    API_KEY:\"\",\n    SPREADSHEET_ID:\"\",\n    error: \"\",\n    posts: [],\n    };\n\n  }\n\n  handleChange=(event) =>{\n    this.setState({ \n       SPREADSHEET_ID: event.target.value\n      \n    })\n    console.log(this.state.SPREADSHEET_ID)\n\n    \n  }\n  \n  validateField = (field, value)=> {\n    if(value.length<=0) {\n      return <div className=\"alert alert-danger\"><span className=\"text-capitalize\">{field}</span> is required field.</div>;\n    } else {\n        return ''\n      }\n    }\n  \n  handleBlur= (event) => {\n    this.setState({ error: this.validateField(event.target.name, event.target.value) });\n  }\n\n  handleChange1 = (event) => {\n    this.setState({\n      API_KEY:event.target.value\n    })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const spreadsheetId = this.state.SPREADSHEET_ID\n    const apiKey = this.state.API_KEY\n    // AIzaSyD6uZbF-ZhTM80WerBpyrivbz5NbnVxdL8\n    console.log(spreadsheetId)\n    const Spreadsheet = `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values:batchGet?ranges=Sheet1&majorDimension=ROWS&key=${apiKey}`;\n    axios\n      .get(Spreadsheet)\n      .then((response) => {\n        console.log(response.data.valueRanges[0].values );\n        this.setState({ posts: response.data.valueRanges[0].values });\n      })\n      .catch((error) => {\n        console.log(error);\n        this.setState({ error: \"Rendering error retrieving data\" });\n      });\n  }\n\n \n\n\n  render() {\n    const { posts, error } = this.state;\n    return (\n      <>\n\n        <div className=\"card box_shw2 border-0 px-3 rounded-2 mb-3 w_500 py-4 mx-auto mt-5\">\n          <div className=\"card-header bg-white f_20_22 border-0 text-center\"></div>\n            <div className=\"card-body\">\n                {/* {this.state.error} */}\n                {this.state.error ? <div className=\"alert alert-danger\"><span className=\"text-capitalize\">{this.state.error}</span></div>: null}\n       \n              <form  encType=\"multipart/form-data\" autoComplete=\"off\">\n                  <div className=\"position-relative form-group\">\n                    <input name=\"API\" type=\"text\" className=\"text-field form-control mb-3 bg_grey border-0 py-3\" placeholder=\"Enter Your Google API key\" value={this.state.name} onChange={this.handleChange1} onBlur={this.handleBlur} \n                    required=\"required\" />\n                  </div>\n                  <div className=\"position-relative form-group\">\n                    <input name=\"SpreadsheetID\" type=\"text\" className=\"text-field form-control mb-3 bg_grey border-0 py-1\" placeholder=\"Enter your Spreadsheet ID\" onBlur={this.handleBlur} onChange={this.handleChange}  />\n                  </div>\n       \n                  <p className=\"text-center mb-0\"><button onClick={this.handleSubmit} className=\"btn btn-primary px-5 text-uppercase py-3 f_12_14 border-0 d-inline-block\" value=\"Submit Now\" >Submit</button></p>\n              </form>\n      \n            </div>\n        </div>\n    <table >\n      <tbody>\n        {     \n             posts.map((numList,i) =>(\n                <tr key={i}>\n                 {\n                   numList.map((num,j)=>\n                      <td key={j}><input type=\"text\" value={num} ref={this.contentEditable} ></input></td>\n                   )\n                 }\n                </tr>\n             ))\n        }\n      </tbody>\n    </table>\n    </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}